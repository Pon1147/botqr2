const {
  SlashCommandBuilder,
  EmbedBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  MessageFlags,
} = require("discord.js");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("capital-input")
    .setDescription("Qu·∫£n l√Ω ti·ªÅn v·ªën v√† xem l·ª£i nhu·∫≠n (admin only)")
    .addStringOption((option) =>
      option
        .setName("action")
        .setDescription("H√†nh ƒë·ªông: th√™m v·ªën ho·∫∑c xem l·ª£i nhu·∫≠n")
        .setRequired(true)
        .addChoices(
          { name: "Th√™m v·ªën", value: "add" },
          { name: "Xem l·ª£i nhu·∫≠n", value: "show" }
        )
    ),
  adminOnly: true,
  async execute(
    interaction,
    userQrData,
    paymentsData,
    saveQrData,
    savePaymentsData,
    logMessage,
    QRCode,
    AttachmentBuilder,
    createQrEmbed,
    createEditButtons,
    getSortedPayments,
    loadCapitalFromSheet,
    saveCapitalToSheet,
    capitalData
  ) {
    const action = interaction.options.getString("action");

    // T√≠nh t·ªïng ti·ªÅn confirmed
    const totalConfirmed = paymentsData
      .filter((tx) => tx.status === "confirmed")
      .reduce((sum, tx) => sum + (parseFloat(tx.amount) || 0), 0);

    const realReceived = totalConfirmed - capitalData; // L·ª£i nhu·∫≠n = confirmed - v·ªën

    if (action === "show") {
      const embed = new EmbedBuilder()
        .setTitle("üí∞ B√°o c√°o t√†i ch√≠nh")
        .addFields(
          {
            name: "Ti·ªÅn v·ªën hi·ªán t·∫°i",
            value: `${capitalData.toLocaleString()} VNƒê`,
            inline: true,
          },
          {
            name: "T·ªïng ti·ªÅn confirmed",
            value: `${totalConfirmed.toLocaleString()} VNƒê`,
            inline: true,
          },
          {
            name: "L·ª£i nhu·∫≠n",
            value: `${realReceived.toLocaleString()} VNƒê`,
            inline: true,
          }
        )
        .setColor(realReceived >= 0 ? "Green" : "Red")
        .setTimestamp();

      await logMessage(
        "INFO",
        `[capital-input] Admin ${
          interaction.user.tag
        } xem l·ª£i nhu·∫≠n: ${realReceived.toLocaleString()} VNƒê`
      );
      return interaction.reply({ embeds: [embed], ephemeral: false });
    }

    if (action === "add") {
      const modal = new ModalBuilder()
        .setCustomId(`capital_modal_${interaction.user.id}`)
        .setTitle("Th√™m ti·ªÅn v·ªën");

      const input = new TextInputBuilder()
        .setCustomId("capital_amount")
        .setLabel("S·ªë ti·ªÅn th√™m (VNƒê)")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder("V√≠ d·ª•: 500000")
        .setRequired(true);

      modal.addComponents(new ActionRowBuilder().addComponents(input));
      await interaction.showModal(modal);

      // X·ª≠ l√Ω modal submit
      const filter = (i) =>
        i.customId === `capital_modal_${interaction.user.id}` &&
        i.user.id === interaction.user.id;
      const modalSubmit = await interaction.awaitModalSubmit({
        filter,
        time: 300000,
      });

      if (modalSubmit) {
        const amountInput =
          modalSubmit.fields.getTextInputValue("capital_amount");
        const addAmount = parseFloat(amountInput.replace(/[^\d]/g, "")) || 0;

        if (addAmount <= 0) {
          return modalSubmit.reply({
            content: "S·ªë ti·ªÅn th√™m kh√¥ng h·ª£p l·ªá!",
            flags: MessageFlags.Ephemeral,
          });
        }

        const newCapital = capitalData + addAmount;
        await saveCapitalToSheet(newCapital);

        const newRealReceived = totalConfirmed - newCapital;

        const embed = new EmbedBuilder()
          .setTitle("üí∞ B√°o c√°o t√†i ch√≠nh (sau khi th√™m v·ªën)")
          .addFields(
            {
              name: "Ti·ªÅn v·ªën m·ªõi",
              value: `${newCapital.toLocaleString()} VNƒê`,
              inline: true,
            },
            {
              name: "T·ªïng ti·ªÅn confirmed",
              value: `${totalConfirmed.toLocaleString()} VNƒê`,
              inline: true,
            },
            {
              name: "L·ª£i nhu·∫≠n",
              value: `${newRealReceived.toLocaleString()} VNƒê`,
              inline: true,
            }
          )
          .setColor(newRealReceived >= 0 ? "Green" : "Red")
          .setTimestamp();

        await logMessage(
          "INFO",
          `[capital-input] Admin ${
            interaction.user.tag
          } th√™m v·ªën ${addAmount.toLocaleString()} VNƒê, v·ªën m·ªõi: ${newCapital.toLocaleString()} VNƒê, l·ª£i nhu·∫≠n: ${newRealReceived.toLocaleString()} VNƒê`
        );
        await modalSubmit.reply({ embeds: [embed], ephemeral: false });
      }
    }
  },
};
